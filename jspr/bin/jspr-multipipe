#!/usr/bin/env python

# JavaScript Portable Runtime
# jspr-multipipe: line-based multiplexer
# Copyright 2009-2010 (c) Tim
# Released under the MIT license

#### TODO: document this
import subprocess, sys
import urllib
import select
import time
import os
import atexit

JSTMP="/var/tmp"

RLMAXWAIT=4.5

VERBOSE=0

WAIT4STDIN=0

POPEN_BUFSIZE=1

PIPENAMES = {}

def _trace(s,l=2):
	global VERBOSE
	if (VERBOSE >= l):
		sys.stderr.write(s)

def nbpeek(f, s):
	return f in select.select([ f ], [], [], s)[0]

def poll():
	global jsx
	global procs
	jsx_stderr = []
	blankblank = False

	abort = False
	while not abort:
	   	wb = [ ]
		rb = [  jsx.stderr ]
		for x in procs.keys():
			#procs[x]['proc'].stdin.flush()

			if (procs[x]['toread']):
				_trace("...wb watching %s.stdin\n" % x, 3)
				wb.append(procs[x]['proc'].stdin)
			else:
				_trace("...rb watching %s.stdout\n" % x, 3)
				rb.append(procs[x]['proc'].stdout)
				if (True):#VERBOSE >= 1):
					_trace("...rb watching %s.stderr\n" % x, 3)
					rb.append(procs[x]['proc'].stderr)
			
			if (procs[x]['towrite']):
				_trace("%s_stdout_lastline: %s\n" % (x, str(procs[x]['towrite'])), 2)
				if (jsx.stdin not in wb):
					wb.append(jsx.stdin)
			else:
				if (jsx.stdout not in rb):
					rb.append(jsx.stdout)
			if (procs[x]['toread']):
				_trace("jsx_stdout_lastline: %s\n" % str(procs[x]['toread']), 2)

		if (jsx.stdout in rb):
			_trace("...rb watching jsx.stdout %3.2f\n" % time.time(), 3)
		if (jsx.stdin in wb):
			_trace("...wb watching jsx.stdin\n", 3)

		tt = select.select(rb,wb,[],RLMAXWAIT)
		for p in tt[0] + tt[1] + tt[2]:
			_trace("%s\n", PIPENAMES[p])
			
		
		if (jsx.stderr in tt[0]):
			tmp = jsx.stderr.readline().rstrip()
			otmp = tmp
			while tmp:
				_trace("got jsx.stderr: %s\n" % tmp, 3)
				jsx_stderr.append(tmp)
				#if (nbpeek(jsx.stderr, 0.01)):
				tmp = jsx.stderr.readline().rstrip()
				#else:
					#tmp = None
			if (not tmp):
				if (blankblank):
					_trace("!!! blankblank\n")
					break
				else:
					blankblank = True
			else:
				blankblank = False

		if (jsx.stdout in tt[0]):
			if True: #while nbpeek(jsx.stdout, 0.01):
				tmp = jsx.stdout.readline().rstrip()
				if (tmp):
					oldtmp  = tmp
					_trace("<<< readline jsx.stdout '%s'\n"% str(tmp), 2)
					if (tmp == '<STDIN>'):
						if WAIT4STDIN:
							ustdin = urllib.quote(GETSTDIN())
						else:
							ustdin = ""
						_trace(">>> jsx.stdin <STDIN> "+ustdin+"\n", 1)
						jsx.stdin.write('<STDIN> '+ustdin+"\n")
						jsx.stdin.flush()
					else:
						bFound = False
						for x in procs.values():
							if (tmp.startswith(x['prefix']+":")):
								tmp = tmp[len(x['prefix'])+1:]
								x['toread'].append(tmp)
								bFound = True
##					else:
##						raise Exception("unknown prefix: %s" % str(tmp))
						#jsx_stdout.append(tmp)
					if (tmp != oldtmp):
						_trace("<<< readline jsx.stdout '%s'\n"% str(tmp), 2)
				else:
					#_trace("jsx.stdout EMPTY -- breaking\n", 2)
					#break
					pass
		else:
			pass #_trace("no jsx.stdout\n", 2)

		for x in procs:
			#_trace("??? %s\n"%x, 2)
			pkid = procs[x]['proc']
			pkid_stdout = procs[x]['towrite']
			prefix = procs[x]['prefix']

			if (pkid.stderr in tt[0]):
				tmp = pkid.stderr.readline().rstrip()
				if (tmp):
					sys.stderr.write("STDERR%s: %s\n" % (x, str(tmp)))
					_trace("[<< %s.stderr  %s\n"% (x, str(tmp)), 2)					
					sys.stderr.flush()


			if (pkid.stdin in tt[1]):
				if (procs[x]['toread']):
					try:
						_trace(">>> %s.stdin  %s\n"% (x, str(procs[x]['toread'])), 2)
						pkid.stdin.write("\n".join(procs[x]['toread'])+"\n")
						procs[x]['toread'] = []
						pkid.stdin.flush()
					except IOError:
						_trace("IOERROR\n", 2)
						abort = True
				else:
					_trace("%s.stdin ready, but no last_line\n" % x, 2)
			else:
				pass #_trace("no pkid.stdin\n", 2)

			if (pkid.stdout in tt[0]):
				tmp = pkid.stdout.readline().rstrip()
				if (tmp):
					pkid_stdout.append(prefix+":"+tmp)
					_trace("<<< %s.stdout  %s\n"% (x, str(pkid_stdout)), 2)
##			if (not pkid_stdout):
##				_trace("EMPTY2 -- breaking\n", 2)
##				break
			else:
				pass#_trace("no pkid.stdout\n", 2)

			if (jsx.stdin in tt[1]):
				if (pkid_stdout):
					try:
						_trace(">>> jsx.stdin  %s\n"% str(pkid_stdout), 1)
						jsx.stdin.write("\n".join(pkid_stdout)+"\n")
					except IOError:
						_trace("IOERROR2\n", 2)
						break
					jsx.stdin.flush()
					while (len(pkid_stdout)): pkid_stdout.pop()
				else:
					_trace("jsx.stdin ready, but no last_line from %s\n" % x, 2)
			else:
				pass #_trace("no jsx.stdin\n", 2)
		#for x in procs
##		except KeyboardInterrupt:
##			e=False
##			break
		if not (len(tt[0]) or len(tt[1])):# or jsx_stdout or pkid_stdout):
			_trace("neither rb or wb, breaking\n", 2)
			break
	e = ""
	l = ""
	#sys.stdout.write("stdouting\n"+str(jsx_stderr))
	if (hasattr(jsx, "kill")):
		for x in procs.values():
			x['proc'].kill()

	OOPs = []
	sout = ""
	for l in jsx_stderr:
		if (l.startswith("stdout:")):
			sout += l[8:].replace(r'\N', "\n")+"\n"
		elif (l.startswith("stderr:")):
			_trace("stderr: "+l[8:]+"\n", 2)
		elif l.find("CPU time limit") == -1:
			OOPs.append(l)
	sys.stdout.write(sout)
	if (OOPs):
		sys.stdout.write("\n")
		[ sys.stdout.write("OOPS: %s\n"%l) for l in OOPs ]
	try:
		jsx.terminate()
	except:
		pass
#

def _GETSTDIN():
	ret = ""
	dlay = 1
	while True:
		tt = select.select([ sys.stdin ],[],[],dlay)
		if (sys.stdin in tt[0]):
			nl = sys.stdin.readline()
			if nl:	ret += nl
			else:	break
		else:	break
	return ret

GETSTDIN = _GETSTDIN

if (os.environ.get("REQUEST_METHOD") == "POST" and
	os.environ.get("CONTENT_TYPE") == "application/x-www-form-urlencoded" and
	os.environ.has_key("CONTENT_LENGTH")):
	_trace("POSTED CONTENT: %s bytes\n" % os.environ['CONTENT_LENGTH'], 2)
	def posted():
		_trace("posted...\n", 2)
		tored = int(os.environ['CONTENT_LENGTH'])
		red = 0
		ret = ""
		_trace("POSTED CONTENT -- reading...\n", 2)
		while (red < tored):
			ret += sys.stdin.read(tored-red)
			red = len(ret)
			_trace("POSTED CONTENT -- read %d / %d...\n" % (red, tored), 2)
		return ret
	GETSTDIN = posted

def main():
	global jsx
	global procs
	global VERBOSE
	global WAIT4STDIN
	global PIPENAMES
	os.nice(5) # make us nicer

	thejsx = None
	
	bindir = os.path.dirname(sys.argv.pop(0))

	if (len(sys.argv) < 2):
		raise Exception("need two or more parameters...")

	ps = []
	while (len(sys.argv)):
		for ss in sys.argv.pop(0).split(' '):
			if (ss == '-v'):
				VERBOSE += 1
				continue
			elif (ss == '-c'):
				WAIT4STDIN += 1
				continue
			if (ss.startswith("+")): ss = "lbs/"+ss[1:]
			if (ss.find(".jsx") > 0):
				thejsx = ss
			else:
				ps.append([ss])
	_trace("thejsxx: %s\n" % str(thejsx), 1)
	procs = {}
	for x in ps:
		if (False and x == ['-']):
			procs[str(x)] = {
				'proc': type('dummy', (object,), { 'stdin':open('/dev/stdout', 'w'), 'stderr':open('/dev/stderr','w'),'stdout':open('/dev/stdin', 'r') })(),
				'buf': list()
				}
		else:
			_trace("x=%s pwd=%s\n" % (x, str(os.getcwd())), 2)
			try:
				proc = subprocess.Popen(x, 
										stdout=subprocess.PIPE,
										stderr=subprocess.PIPE,
										stdin=subprocess.PIPE,
										close_fds=True,
										bufsize=POPEN_BUFSIZE,
										universal_newlines=True
								 )
			except OSError, e:
				print "Does executable service %s exist??" % x
				raise e
			procs[str(x)] =  {
				'proc': proc,
				'towrite': [],
				'toread': [],
				'prefix': os.path.basename(x[0]), #FIXME: may not be uniq!
				'bindir': os.path.dirname(x[0])
				}
			PIPENAMES[proc.stdout] = 'proc.stdout'
			PIPENAMES[proc.stderr] = 'proc.stderr'
			PIPENAMES[proc.stdin] = 'proc.stdin'

	jss = [ file(bindir+'/jspr-multipipe.js').read() ]

	for x in procs.values():
		try:
			jss.append(file(x['bindir'] + '/' + x['prefix']+'.js').read())
		except IOError:
			_trace("stdio.writeError('WARNING: %s.js glue not found');\n" % x['prefix'], 2)
			jss.append("stdio.writeError('WARNING: %s.js glue not found');" % x['prefix'])

	jss.append("main();loop();")
	fname = JSTMP+"/tim.jsprmulti.%d.js" % os.getpid()
	pjsx = [bindir+'/jspr-eval', fname]
	open(fname, "w").write(
		file(thejsx).read()+ \
		"\n"+ \
		"\n".join(jss)+ \
		"\n")
	atexit.register(os.unlink, fname)
	try:
		jsx=subprocess.Popen(pjsx,
							 stdin=subprocess.PIPE,
							 stderr=subprocess.PIPE,
							 stdout=subprocess.PIPE,
							 close_fds=True,
							 shell=False,
							 bufsize=POPEN_BUFSIZE,
							 universal_newlines=True
							 )
	except OSError, e:
		print "Does executable jsx %s exist??" % pjsx
		raise e
	PIPENAMES[jsx.stdout] = 'jsxstdout'
	PIPENAMES[jsx.stderr] = 'jsx.stderr'
	PIPENAMES[jsx.stdin] = 'jsx.stdin'

	poll()

main()
